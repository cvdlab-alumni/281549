Tutte le funzioni sono in maiuscolo, accettano un solo parametro (un array) e restituiscono una funzione

===== DOMAIN =====

Prende in input un array in cui sono contenuti gli intervalli delle dimensioni del dominio e restituisce un modello che rappresenta tale dominio


### CODE ###


/*
 * Definisce un dominio monodimensionale con intervallo da 0 a 1
 */
DOMAIN ( [ [0,1] ]);

/*
 * Definisce un dominio bidimensionale con intervallo della prima dimensione 
 * da 0 a 1 e della seconda dimensione da 5 a 10
 */
DOMAIN ( [ [0,1] , [5,10] ]);

/*
 * Definisce un dominio tridimensionale con intervallo della prima dimensione
 * da 0 a 1, della seconda dimensione da 2 a 3 e della terza dimensione da 4 a 5
 */
DOMAIN ( [ [0,1] , [2,3] , [4,5] ]);


### END CODE ###


La funzione restituita accetta un array di interi che stabilisce il numero di elementi finiti presenti nell'intervallo specificato, uno per ogni dimensione specificata


### CODE ###


/*
 * Genera un modello monodimensionale con 10 punti nell'intervallo da 0 a 1
 */
var dominio = DOMAIN( [ [0,1] ] );
dominio([10]);

/*
 * Forma abbreviata della versione precedente
 */
 DOMAIN( [ [0,1] ] ) ([10]);


### END CODE ###


===== MAP =====

Prende in input una funzione che stabilisce il mapping tra due domini e restituisce una funzione applicabile ad un dominio. Il risultato di quest'ultima applicazione e' il nuovo dominio mappato

### CODE ###


/*
 * Definisce un mapping che trasla le coordinate della prima dimensione in avanti di 1
 * Si ricorda che il parametro p della funzione rappresenta un generico punto n-dimensionale
 * dove p[0] = x, p[1] = y, p[2] = z, ecc...
 */
var dominio = DOMAIN(...);
var mapping = MAP( function(p) {
	return [p[0] + 1];
} );
mapping(dominio);

/*
 * Definisce un mapping che trasla le coordinate della prima dimensione (p[0]) nelle coordinate
 * della seconda dimensione (p[1]);
 * Si ricorda che il parametro p della funzione rappresenta un generico punto n-dimensionale
 * dove p[0] = x, p[1] = y, p[2] = z, ecc...
 */
var dominio = DOMAIN(...);
var mapping = MAP( function(p) {
	return [0,p[0]];
} );
mapping(dominio);


### END CODE ###

===== COLOR =====

Prende in input un colore RGB sotto forma di array di 3 posizioni [R,G,B] dove i valori delle tonalita' sono espressi nell'intervallo chiuso [0,1] dove 0 e' assenza di tonalita' mentre 1 e' tonalita' piena, e restituisce una funzione da applicare ad un dominio

### CODE ###


/*
 * Crea una funzione che colora di nero ([0,0,0]) il modello passato in input
 */
var dominio = DOMAIN(...);
var color = COLOR([0,0,0]);
color(dominio);


### END CODE ###


===== DRAW =====

Prende in input un modello e lo disegna sul canvas

### CODE ###


/*
 * Disegna il modello
 */
var dominio = DOMAIN(...);
DRAW(dominio);


### END CODE ###

